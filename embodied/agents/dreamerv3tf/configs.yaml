defaults:

  # Trainer
  logdir: /dev/null
  seed: 0
  task: dummy_discrete
  env: {amount: 4, parallel: process, daemon: False, repeat: 1, size: [64, 64], camera: -1, gray: False, length: 0, discretize: 0, lives: False, sticky: True, episodic: True, restart: True, checks: False, resets: True, seed: 0}
  replay: fixed
  replay_size: 1e6
  replay_chunk: 64
  replay_fixed: {slots: 1024, prio_starts: 0.0, prio_ends: 1.0, sync: 0}
  replay_consec: {slots: 1024, randomize: False, sync: 0}
  replay_prio: {slots: 1024, prio_starts: 0.0, prio_ends: 1.0, sync: 0, fraction: 0.1, softmax: False, temp: 1.0, constant: 0.0, exponent: 0.5}
  tf: {jit: True, platform: gpu, precision: float16, debug_nans: False, logical_gpus: 0, dist_dataset: False, dist_policy: False, tensorfloat: True, soft_placement: False, growth: True}
  eval_dir: ''
  filter: '.*'
  tbtt: 0
  run:
    script: train
    steps: 1e10
    expl_until: 0
    log_every: 60
    eval_every: 1e5
    eval_eps: 1
    eval_samples: 1
    train_ratio: 64
    batch_steps: -1
    train_fill: 1024
    eval_fill: 1024
    pretrain: 1
    log_zeros: False
    log_keys_video: [image]
    log_keys_sum: '^$'
    log_keys_mean: '^$'
    log_keys_max: '^$'
    sync_every: 120

  # Agent
  task_behavior: Greedy
  expl_behavior: None
  transform_rewards: off
  batch_size: 32
  data_loader: tfdata  # embodied
  expl_noise: 0.0
  eval_noise: 0.0
  priority: reward_loss
  priority_correct: 0.0

  # World Model
  grad_heads: [decoder, reward, cont]
  rssm: {units: 1024, deter: 1024, stoch: 32, classes: 32, act: elu, norm: layer, initial: learned, unimix: 0.01, prior_layers: 3, post_layers: 1, gru_layers: 1, unroll: True}
  encoder: {mlp_keys: '.*', cnn_keys: '.*', act: elu, norm: layer, mlp_layers: 4, mlp_units: 512, cnn: simple, cnn_depth: 64, cnn_kernels: [4, 4, 4, 4], cnn_blocks: 2}
  decoder: {mlp_keys: '.*', cnn_keys: '.*', act: elu, norm: layer, mlp_layers: 4, mlp_units: 512, cnn: simple, cnn_depth: 64, cnn_kernels: [5, 5, 6, 6], cnn_blocks: 2, image_dist: mse, inputs: [deter, stoch]}
  reward_head: {layers: 4, units: 512, act: elu, norm: layer, dist: symlog, outscale: 0.1, inputs: [deter, stoch]}
  cont_head: {layers: 4, units: 512, act: elu, norm: layer, dist: binary, outscale: 0.1, inputs: [deter, stoch]}
  loss_scales: {kl: 1.0, image: 1.0, reward: 1.0, cont: 1.0}
  model_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, wd_pattern: '/(w|kernel)$', warmup: 0}
  wmkl: {impl: mult, scale: 0.1, target: 3.5, min: 1e-3, max: 1.0, vel: 0.1}
  wmkl_balance: 0.8

  # Actor Critic
  actor: {layers: 4, units: 512, act: elu, norm: layer, minstd: 0.03, maxstd: 1.0, outscale: 0.1, unimix: 0.01, inputs: [deter, stoch]}
  critic: {layers: 4, units: 512, act: elu, norm: layer, dist: symlog, outscale: 0.1, inputs: [deter, stoch]}
  actor_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, wd_pattern: '/(w|kernel)$', warmup: 0}
  critic_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, wd_pattern: '/(w|kernel)$', warmup: 0}
  actor_dist_disc: onehot
  actor_dist_cont: normal
  discount: 0.997
  imag_horizon: 15
  imag_unroll: True
  return_lambda: 0.95
  actor_return: gve
  critic_return: gve
  actor_grad_disc: reinforce
  actor_grad_cont: backprop
  slow_target: True
  slow_target_update: 100
  slow_target_fraction: 1.0
  actent: {impl: fixed, scale: 2e-3, target: 0.4, min: 1e-5, max: 1.0, vel: 0.1}  # mult
  actent_norm: True
  advnorm: {impl: off, decay: 0.99, max: 1e8}  # mean_std
  retnorm: {impl: mean_std, decay: 0.999, max: 1e8}  # off
  scorenorm: {impl: off, decay: 0.99, max: 1e8}
  critic_type: vfunction
  # pengs_qlambda: False
  # hyper_discs: [0.9, 0.99, 0.999]
  slow_actor: False
  slow_actor_fraction: 0.01
  slowkl: {impl: mult, scale: 3e-3, target: 0.01, min: 1e-5, max: 1.0, vel: 0.1}
  policy_prior: ema
  policy_prior_mix: 0.5

  # Exploration
  expl_rewards: {extr: 0.0, disag: 0.0, vae: 0.0, ctrl: 0.0, pbe: 0.0}
  expl_discount: 0.99
  expl_retnorm: {impl: mean_std, decay: 0.999, max: 1e8}
  expl_scorenorm: {impl: off, decay: 0.999, max: 1e8}
  expl_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, warmup: 0}
  disag_head: {layers: 4, units: 512, act: elu, norm: layer, dist: mse, outscale: 1.0, inputs: [deter, stoch, action]}
  disag_target: [stoch]
  disag_models: 8
  ctrl_embed: {layers: 3, units: 512, act: elu, norm: layer, dist: mse, inputs: [deter, stoch]}
  ctrl_head: {layers: 1, units: 128, act: elu, norm: layer, dist: mse, inputs: [current, next]}
  ctrl_size: 32
  ctrl_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, warmup: 0}
  pbe_inputs: [deter]
  pbe_knn: 16
  expl_enc: {layers: 4, units: 512, act: elu, norm: layer, dist: onehot, outscale: 0.1, inputs: [deter], shape: [8, 8]}
  expl_dec: {layers: 4, units: 512, act: elu, norm: layer, dist: mse, outscale: 0.1}
  expl_kl: {impl: mult, scale: 0.1, target: 10.0, min: 0.0, max: 1.0, vel: 0.1}
  expl_vae_elbo: False
  expl_when_buffer: 1e4
  expl_when_frac: 0.1
  expl_when_every: 50
  expl_when_random: False

minecraft:

  task: minecraft_discover
  env: {amount: 16, parallel: thread}
  run:
    eval_fill: 1e5
    train_ratio: 16
    log_keys_max: '^log_inventory.*'
  encoder: {mlp_keys: 'inventory|equipped|reward|is_terminal', cnn_keys: 'image'}
  decoder: {mlp_keys: 'inventory|equipped', cnn_keys: 'image'}
  # jax.precision: float32

dmlab:

  task: dmlab_rooms_collect_good_objects_train
  env: {repeat: 4, episodic: False, amount: 16}
  encoder: {mlp_keys: 'reward', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

atari:

  task: atari_pong
  env: {gray: True, repeat: 4, amount: 16}
  run:
    # script: train_eval
    steps: 5e7
    eval_every: 5e5
    eval_eps: 10
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

atari100k:

  task: atari_pong
  env: {gray: True, repeat: 4, sticky: False}
  run:
    script: train_eval
    steps: 1.2e5
    eval_every: 1e5
    eval_eps: 10
    train_ratio: 1024
  jax.precision: float32
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

crafter:

  task: crafter_reward
  run:
    log_keys_max: '^log_achievement_.*'
    log_keys_sum: '^log_reward$'
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

dmc_vision:

  task: dmc_walker_walk
  env.repeat: 2
  run.train_ratio: 512
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

dmc_proprio:

  task: dmc_walker_walk
  env.repeat: 2
  run.train_ratio: 512
  encoder: {mlp_keys: '.*', cnn_keys: '$^'}
  decoder: {mlp_keys: '.*', cnn_keys: '$^'}

robodesk:

  task: robodesk_push_slide_dense
  env: {amount: 8, repeat: 4, length: 2000}
  run:
    script: train_eval
    eval_every: 2.5e4
    eval_eps: 8
    train_ratio: 256
  encoder: {mlp_keys: '^$', cnn_keys: 'image'}
  decoder: {mlp_keys: '^$', cnn_keys: 'image'}
  discount: 0.99

loconav_ant:

  task: loconav_ant_umaze
  env.repeat: 2
  run:
    train_ratio: 512
    log_keys_max: '^log_.*'
  encoder: {mlp_keys: '.*', cnn_keys: 'image'}
  decoder: {mlp_keys: '.*', cnn_keys: 'image'}

hrlgrid:

  task: hrlgrid_16
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

small:

  env.amount: 2
  run:
    eval_every: 1e4
    log_every: 20
    train_fill: 100
    eval_fill: 100
    train_every: 16
  tf.precision: float32
  replay_chunk: 16
  replay_fixed: {slots: 32}
  rssm.deter: 128
  rssm.units: 128
  rssm.stoch: 8
  .*\.cnn_depth$: 16
  .*\.wd$: 0.0

debug:

  tf: {platform: gpu, jit: False}
  env: {length: 100, restart: False, amount: 2, checks: True}
  run:
    eval_every: 300
    log_every: 10
    train_fill: 100
    eval_fill: 100
  replay_fixed: {slots: 32}
  replay_size: 500
  batch_size: 8
  replay_chunk: 12
  encoder.cnn_depth: 16
  decoder.cnn_depth: 16
  rssm: {units: 64, stoch: 8, classes: 8}
  .*\.layers: 2
  .*\.units: 64
  .*\.wd$: 0.0
